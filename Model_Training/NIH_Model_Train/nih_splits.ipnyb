{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"ZdlyCDRGTNRX"},"outputs":[],"source":["import pandas as pd\n","from fastai.vision.all import *\n","from sklearn.model_selection import train_test_split\n","import os"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive', force_remount=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XrngsNxaMrrG","executionInfo":{"status":"ok","timestamp":1671902684799,"user_tz":300,"elapsed":19492,"user":{"displayName":"Preetham Bachina","userId":"11894630684993396878"}},"outputId":"fc1d5004-0cf5-492a-d472-300b1056f866"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["#Read NIH labels csv\n","path = '/content/drive/MyDrive/UM2ii/'\n","df = pd.read_csv(os.path.join(path,'Data_Entry_2017.csv'))"],"metadata":{"id":"Ua5WOOcjwgi_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#No patient has an unknown gender or age\n","df = df.rename(columns={\"Patient Gender\": \"Gender\"})\n","\n","#Clean Patient Age column and startify patients based on age group in Patient Age Category column\n","agedict = {\n","    \"1 to 20\": 0,\n","    \"21 to 40\": 1,\n","    \"41 to 60\": 2,\n","    \"61 to 80\": 3,\n","    \">=81\": 4\n","}\n","df[\"Patient Age Category\"]=(~df[\"Patient Age\"]>0).astype(int)\n","df[\"Patient Age Category\"]=df[\"Patient Age Category\"]+(df[\"Patient Age\"]>=21).astype(int)\n","df[\"Patient Age Category\"]=df[\"Patient Age Category\"]+(df[\"Patient Age\"]>=41).astype(int)\n","df[\"Patient Age Category\"]=df[\"Patient Age Category\"]+(df[\"Patient Age\"]>=61).astype(int)\n","df[\"Patient Age Category\"]=df[\"Patient Age Category\"]+(df[\"Patient Age\"]>=81).astype(int)"],"metadata":{"id":"xvoj4_UxxZx4"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pLW7GdgxTuAu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664927825213,"user_tz":240,"elapsed":10,"user":{"displayName":"Preetham Bachina","userId":"11894630684993396878"}},"outputId":"03871f18-6d98-4716-8dc7-5f31d1ffb463"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["train    0.696905\n","test     0.200633\n","val      0.102462\n","Name: split, dtype: float64"]},"metadata":{},"execution_count":5}],"source":["#Create train, validation, test splits\n","train_id, test_id = train_test_split(df[\"Patient ID\"].unique(), test_size=0.2, random_state=2022)\n","train_id, val_id = train_test_split(train_id, test_size=0.125, random_state=2022)\n","df.loc[df[\"Patient ID\"].isin(train_id), 'split']= 'train'\n","df.loc[df[\"Patient ID\"].isin(val_id), 'split']='val'\n","df.loc[df[\"Patient ID\"].isin(test_id), 'split']='test'\n","\n","df.split.value_counts(normalize=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MtuOuOB3Tvc2"},"outputs":[],"source":["#Method to ensure no leakage occured\n","def no_leakage(train, val, test):\n","    intersect1 = pd.Series(np.intersect1d(train[\"Patient ID\"], val[\"Patient ID\"]))\n","    intersect2 = pd.Series(np.intersect1d(train[\"Patient ID\"], test[\"Patient ID\"]))\n","    intersect3 = pd.Series(np.intersect1d(val[\"Patient ID\"], test[\"Patient ID\"]))\n","    return intersect1.empty and intersect2.empty and intersect3.empty"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oCdgUrRCTzES"},"outputs":[],"source":["train_df = df[df.split == 'train']\n","val_df = df[df.split == 'val']\n","test_df = df[df.split == 'test']\n","\n","if no_leakage(train_df, val_df, test_df):\n","    # Calculates percentage of images with certain feature\n","    data = [[\"train\", len(train_df[train_df[\"Gender\"] == 'F']) / len(train_df),\n","             len(train_df[train_df[\"Patient Age Category\"] == 0]) / len(train_df),\n","             len(train_df[train_df[\"Patient Age Category\"] == 1]) / len(train_df),\n","             len(train_df[train_df[\"Patient Age Category\"] == 2]) / len(train_df),\n","             len(train_df[train_df[\"Patient Age Category\"] == 3]) / len(train_df),\n","             len(train_df[train_df[\"Patient Age Category\"] == 4]) / len(train_df)]]\n","    data.append([\"val\", len(val_df[val_df[\"Gender\"] == 'F']) / len(val_df),\n","                 len(val_df[val_df[\"Patient Age Category\"] == 0]) / len(val_df),\n","                 len(val_df[val_df[\"Patient Age Category\"] == 1]) / len(val_df),\n","                 len(val_df[val_df[\"Patient Age Category\"] == 2]) / len(val_df),\n","                 len(val_df[val_df[\"Patient Age Category\"] == 3]) / len(val_df),\n","                 len(val_df[val_df[\"Patient Age Category\"] == 4]) / len(val_df)])\n","    data.append([\"test\", len(test_df[test_df[\"Gender\"] == 'F']) / len(test_df),\n","                 len(test_df[test_df[\"Patient Age Category\"] == 0]) / len(test_df),\n","                 len(test_df[test_df[\"Patient Age Category\"] == 1]) / len(test_df),\n","                 len(test_df[test_df[\"Patient Age Category\"] == 2]) / len(test_df),\n","                 len(test_df[test_df[\"Patient Age Category\"] == 3]) / len(test_df),\n","                 len(test_df[test_df[\"Patient Age Category\"] == 4]) / len(test_df)])\n","    demographics_df = pd.DataFrame(data, columns=[\"Data Set\", \"Female Patients\", \"0 to 20 years\", \"21 to 40 years\",\n","                                                  \"41 to 60 years\", \"61 to 80 years\", \">= 81 years\"])\n","    demographics_df.set_index('Data Set')\n","\n","    # Writes csv files\n","    path = '/content/drive/MyDrive/UM2ii'\n","    df.to_csv(os.path.join(path, 'nih_split.csv'), encoding='utf-8', index=False)\n","    demographics_df.to_csv(os.path.join(path, 'nih_demographic_distribution.csv'),  encoding='utf-8', index=False)"]}],"metadata":{"colab":{"provenance":[],"mount_file_id":"1LQvwVSKX1FybCesa27ta7iFsqhFF5QbX","authorship_tag":"ABX9TyOGTOvKBceMY1p5q30UAFY1"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"gpuClass":"standard"},"nbformat":4,"nbformat_minor":0}